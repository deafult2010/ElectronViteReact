#Maximum likelihood estimation template solve programatically using scipy
import numpy as np
import math
import json
from scipy.optimize import minimize

#minimise objective
#MLE minimise the negative of the sum (i.e. maximise the sum)
def objective(x):
    json_data = "[-0.1198,-0.0951,-0.076,-0.0589,-0.0518,-0.0489,-0.0442,-0.0441,-0.0434,-0.0432,-0.0404,-0.0388,-0.0363,-0.0356,-0.0353,-0.0351,-0.0339,-0.0337,-0.0337,-0.0335,-0.0325,-0.0324,-0.032,-0.0307,-0.0303,-0.0298,-0.0295,-0.0293,-0.0293,-0.0291,-0.0281,-0.0281,-0.0281,-0.028,-0.0278,-0.0277,-0.0271,-0.0259,-0.0259,-0.0257,-0.025,-0.0249,-0.0248,-0.0245,-0.0244,-0.0242,-0.0241,-0.0238,-0.0237,-0.0237,-0.0233,-0.0227,-0.022,-0.0214,-0.0214,-0.0212,-0.0211,-0.0208,-0.0208,-0.0206,-0.0205,-0.0204,-0.0201,-0.02,-0.0197,-0.0194,-0.0193,-0.0191,-0.019,-0.019,-0.019,-0.0189,-0.0186,-0.0185,-0.0184,-0.0184,-0.0182,-0.0181,-0.0179,-0.0179,-0.0179,-0.0177,-0.0176,-0.0175,-0.0172,-0.0171,-0.0171,-0.017,-0.0169,-0.0166,-0.0165,-0.0165,-0.0165,-0.0164,-0.0163,-0.0163,-0.016,-0.0159,-0.0158,-0.0158,-0.0157,-0.0157,-0.0156,-0.0156,-0.0155,-0.0154,-0.0154,-0.0153,-0.0151,-0.0151,-0.0148,-0.0148,-0.0148,-0.0147,-0.0145,-0.0145,-0.0144,-0.0143,-0.0142,-0.0142,-0.014,-0.0138,-0.0138,-0.0137,-0.0135,-0.0134,-0.0134,-0.0132,-0.0131,-0.0131,-0.013,-0.013,-0.013,-0.0129,-0.0126,-0.0126,-0.0123,-0.0123,-0.0123,-0.0123,-0.0122,-0.0122,-0.0121,-0.0121,-0.012,-0.0119,-0.0119,-0.0118,-0.0118,-0.0116,-0.0116,-0.0116,-0.0116,-0.0116,-0.0115,-0.0115,-0.0114,-0.0113,-0.0113,-0.0112,-0.0112,-0.0111,-0.0111,-0.011,-0.011,-0.011,-0.0109,-0.0108,-0.0108,-0.0107,-0.0107,-0.0106,-0.0105,-0.0105,-0.0105,-0.0104,-0.0104,-0.0103,-0.0103,-0.0102,-0.0101,-0.0101,-0.01,-0.0097,-0.0097,-0.0096,-0.0095,-0.0094,-0.0094,-0.0094,-0.0093,-0.0092,-0.0092,-0.0092,-0.0092,-0.0091,-0.0091,-0.009,-0.009,-0.009,-0.0089,-0.0088,-0.0088,-0.0087,-0.0087,-0.0086,-0.0086,-0.0085,-0.0085,-0.0084,-0.0084,-0.0084,-0.0084,-0.0084,-0.0084,-0.0083,-0.0082,-0.0082,-0.0081,-0.0081,-0.0081,-0.0081,-0.008,-0.008,-0.0079,-0.0079,-0.0079,-0.0079,-0.0078,-0.0078,-0.0078,-0.0078,-0.0077,-0.0077,-0.0077,-0.0077,-0.0076,-0.0076,-0.0076,-0.0076,-0.0075,-0.0075,-0.0075,-0.0075,-0.0075,-0.0075,-0.0074,-0.0074,-0.0073,-0.0073,-0.0073,-0.0072,-0.0072,-0.0072,-0.0072,-0.0072,-0.0072,-0.0072,-0.0072,-0.0071,-0.0071,-0.007,-0.007,-0.007,-0.007,-0.007,-0.0069,-0.0069,-0.0069,-0.0068,-0.0068,-0.0068,-0.0067,-0.0067,-0.0067,-0.0067,-0.0067,-0.0066,-0.0066,-0.0066,-0.0066,-0.0066,-0.0065,-0.0065,-0.0065,-0.0065,-0.0064,-0.0064,-0.0063,-0.0063,-0.0063,-0.0062,-0.0062,-0.0062,-0.0061,-0.0061,-0.0061,-0.0061,-0.0061,-0.006,-0.0058,-0.0058,-0.0058,-0.0058,-0.0058,-0.0057,-0.0057,-0.0057,-0.0056,-0.0056,-0.0055,-0.0054,-0.0054,-0.0054,-0.0054,-0.0054,-0.0053,-0.0053,-0.0053,-0.0053,-0.0053,-0.0053,-0.0053,-0.0052,-0.0052,-0.0051,-0.005,-0.0049,-0.0048,-0.0048,-0.0048,-0.0048,-0.0048,-0.0047,-0.0047,-0.0047,-0.0046,-0.0046,-0.0046,-0.0046,-0.0046,-0.0046,-0.0045,-0.0045,-0.0045,-0.0045,-0.0044,-0.0044,-0.0044,-0.0043,-0.0042,-0.0042,-0.0042,-0.0041,-0.0041,-0.0041,-0.0041,-0.0041,-0.004,-0.004,-0.004,-0.0039,-0.0039,-0.0039,-0.0039,-0.0039,-0.0038,-0.0038,-0.0038,-0.0038,-0.0038,-0.0038,-0.0038,-0.0038,-0.0038,-0.0037,-0.0037,-0.0036,-0.0036,-0.0036,-0.0035,-0.0035,-0.0035,-0.0035,-0.0034,-0.0034,-0.0034,-0.0034,-0.0034,-0.0033,-0.0033,-0.0032,-0.0032,-0.0032,-0.0032,-0.0032,-0.0031,-0.0031,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.003,-0.0029,-0.0029,-0.0029,-0.0029,-0.0029,-0.0028,-0.0028,-0.0028,-0.0028,-0.0028,-0.0028,-0.0028,-0.0028,-0.0027,-0.0027,-0.0027,-0.0027,-0.0027,-0.0026,-0.0026,-0.0026,-0.0025,-0.0025,-0.0025,-0.0025,-0.0025,-0.0024,-0.0024,-0.0024,-0.0023,-0.0023,-0.0022,-0.0022,-0.0022,-0.0022,-0.0022,-0.0022,-0.0022,-0.0022,-0.0021,-0.0021,-0.0021,-0.0021,-0.0021,-0.0021,-0.0021,-0.002,-0.002,-0.002,-0.002,-0.002,-0.002,-0.002,-0.002,-0.002,-0.002,-0.0019,-0.0019,-0.0019,-0.0019,-0.0018,-0.0018,-0.0018,-0.0017,-0.0017,-0.0017,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0016,-0.0015,-0.0015,-0.0015,-0.0015,-0.0015,-0.0015,-0.0015,-0.0015,-0.0014,-0.0014,-0.0014,-0.0014,-0.0014,-0.0013,-0.0013,-0.0013,-0.0013,-0.0013,-0.0013,-0.0013,-0.0013,-0.0012,-0.0012,-0.0012,-0.0012,-0.0012,-0.0011,-0.0011,-0.0011,-0.0011,-0.0011,-0.0011,-0.001,-0.001,-0.001,-0.001,-0.0009,-0.0009,-0.0009,-0.0009,-0.0009,-0.0008,-0.0008,-0.0008,-0.0008,-0.0008,-0.0008,-0.0008,-0.0008,-0.0008,-0.0008,-0.0007,-0.0007,-0.0007,-0.0007,-0.0006,-0.0006,-0.0006,-0.0006,-0.0006,-0.0006,-0.0006,-0.0005,-0.0005,-0.0005,-0.0005,-0.0004,-0.0004,-0.0004,-0.0004,-0.0004,-0.0004,-0.0004,-0.0003,-0.0003,-0.0003,-0.0003,-0.0003,-0.0003,-0.0003,-0.0002,-0.0002,-0.0002,-0.0002,-0.0002,-0.0002,-0.0002,-0.0002,-0.0002,-0.0001,-0.0001,-0.0001,-0.0001,-0.0001,-0.0001,-0.0001,0,0,0,0,0,0,0,0.0001,0.0001,0.0001,0.0001,0.0001,0.0001,0.0002,0.0002,0.0002,0.0002,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0003,0.0004,0.0005,0.0005,0.0005,0.0005,0.0006,0.0006,0.0006,0.0006,0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0007,0.0008,0.0008,0.0008,0.0008,0.0008,0.0009,0.0009,0.0009,0.0009,0.0009,0.0009,0.0009,0.0009,0.0009,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.0011,0.0011,0.0011,0.0012,0.0012,0.0012,0.0012,0.0012,0.0012,0.0013,0.0013,0.0013,0.0013,0.0013,0.0013,0.0013,0.0014,0.0014,0.0014,0.0014,0.0014,0.0014,0.0015,0.0015,0.0015,0.0015,0.0015,0.0015,0.0016,0.0016,0.0016,0.0016,0.0016,0.0016,0.0017,0.0017,0.0017,0.0017,0.0017,0.0017,0.0018,0.0018,0.0018,0.0018,0.0018,0.0018,0.0018,0.0018,0.0018,0.0018,0.0019,0.0019,0.0019,0.0019,0.0019,0.0019,0.002,0.0021,0.0021,0.0021,0.0021,0.0022,0.0022,0.0022,0.0022,0.0022,0.0022,0.0022,0.0022,0.0023,0.0023,0.0023,0.0023,0.0023,0.0023,0.0023,0.0024,0.0024,0.0024,0.0024,0.0024,0.0024,0.0025,0.0025,0.0025,0.0026,0.0026,0.0026,0.0027,0.0027,0.0027,0.0027,0.0028,0.0028,0.0028,0.0028,0.0028,0.0028,0.0028,0.0028,0.0028,0.0028,0.0029,0.0029,0.0029,0.0029,0.0029,0.0029,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.003,0.0031,0.0031,0.0031,0.0031,0.0032,0.0033,0.0033,0.0033,0.0033,0.0033,0.0033,0.0034,0.0034,0.0034,0.0034,0.0034,0.0034,0.0034,0.0034,0.0035,0.0035,0.0035,0.0035,0.0036,0.0036,0.0036,0.0036,0.0036,0.0036,0.0036,0.0036,0.0036,0.0037,0.0037,0.0037,0.0037,0.0037,0.0037,0.0037,0.0037,0.0038,0.0038,0.0038,0.0039,0.0039,0.0039,0.0039,0.0039,0.0039,0.004,0.004,0.004,0.004,0.0041,0.0041,0.0041,0.0041,0.0041,0.0042,0.0042,0.0042,0.0042,0.0042,0.0043,0.0043,0.0043,0.0043,0.0045,0.0045,0.0045,0.0045,0.0045,0.0045,0.0046,0.0046,0.0047,0.0047,0.0047,0.0047,0.0047,0.0047,0.0047,0.0047,0.0047,0.0047,0.0048,0.0048,0.0048,0.0049,0.0049,0.005,0.005,0.005,0.0051,0.0051,0.0051,0.0052,0.0052,0.0052,0.0052,0.0052,0.0052,0.0053,0.0053,0.0054,0.0055,0.0056,0.0056,0.0056,0.0056,0.0057,0.0057,0.0057,0.0057,0.0057,0.0058,0.0058,0.0058,0.0058,0.0058,0.0058,0.0059,0.0059,0.0059,0.0059,0.006,0.006,0.0061,0.0062,0.0062,0.0062,0.0063,0.0063,0.0063,0.0063,0.0064,0.0064,0.0064,0.0064,0.0064,0.0064,0.0065,0.0065,0.0065,0.0065,0.0065,0.0065,0.0066,0.0066,0.0067,0.0067,0.0067,0.0067,0.0067,0.0067,0.0068,0.0068,0.0068,0.0069,0.0069,0.0069,0.0069,0.0069,0.0069,0.0069,0.007,0.007,0.007,0.007,0.0071,0.0071,0.0071,0.0071,0.0072,0.0072,0.0072,0.0072,0.0073,0.0073,0.0073,0.0073,0.0074,0.0074,0.0074,0.0074,0.0074,0.0074,0.0075,0.0075,0.0075,0.0075,0.0075,0.0075,0.0076,0.0076,0.0077,0.0077,0.0077,0.0077,0.0077,0.0077,0.0078,0.008,0.008,0.008,0.0081,0.0081,0.0081,0.0081,0.0082,0.0082,0.0082,0.0082,0.0082,0.0082,0.0082,0.0083,0.0083,0.0083,0.0083,0.0084,0.0084,0.0084,0.0084,0.0084,0.0085,0.0085,0.0085,0.0085,0.0085,0.0085,0.0086,0.0086,0.0086,0.0087,0.0087,0.0088,0.0088,0.0088,0.0088,0.0088,0.0088,0.0089,0.0089,0.009,0.009,0.0091,0.0091,0.0091,0.0092,0.0092,0.0093,0.0093,0.0094,0.0094,0.0095,0.0095,0.0095,0.0095,0.0095,0.0095,0.0096,0.0096,0.0097,0.0097,0.0097,0.0098,0.0098,0.0099,0.0099,0.0099,0.0099,0.01,0.01,0.0101,0.0101,0.0102,0.0102,0.0104,0.0105,0.0105,0.0105,0.0105,0.0105,0.0105,0.0106,0.0106,0.0106,0.0106,0.0106,0.0107,0.0108,0.0109,0.0109,0.0109,0.0109,0.0109,0.0109,0.011,0.011,0.011,0.011,0.0111,0.0112,0.0113,0.0113,0.0113,0.0113,0.0114,0.0114,0.0114,0.0115,0.0115,0.0115,0.0115,0.0115,0.0116,0.0116,0.0117,0.0117,0.0117,0.0118,0.0118,0.0119,0.0119,0.0119,0.0119,0.012,0.012,0.0121,0.0121,0.0121,0.0122,0.0122,0.0123,0.0123,0.0123,0.0123,0.0123,0.0124,0.0127,0.0127,0.0128,0.0129,0.0129,0.0129,0.013,0.013,0.013,0.013,0.0131,0.0132,0.0132,0.0133,0.0134,0.0136,0.0136,0.0136,0.0136,0.0138,0.0139,0.0139,0.0139,0.014,0.014,0.0141,0.0142,0.0142,0.0142,0.0142,0.0142,0.0143,0.0143,0.0144,0.0144,0.0144,0.0145,0.0145,0.0145,0.0145,0.0146,0.0146,0.0147,0.0147,0.0147,0.0147,0.0148,0.0148,0.0149,0.0149,0.015,0.015,0.015,0.0151,0.0152,0.0153,0.0154,0.0154,0.0155,0.0155,0.0156,0.0158,0.0159,0.016,0.0161,0.0161,0.0161,0.0161,0.0162,0.0163,0.0163,0.0164,0.0165,0.0166,0.0167,0.0169,0.0171,0.0173,0.0174,0.0175,0.0176,0.0178,0.0178,0.018,0.0183,0.0184,0.0185,0.0186,0.0186,0.0188,0.0189,0.0189,0.0189,0.019,0.0192,0.0195,0.0195,0.0196,0.0197,0.0199,0.0201,0.0202,0.0207,0.0212,0.0213,0.0214,0.0214,0.022,0.0224,0.0224,0.0228,0.0228,0.0229,0.023,0.0237,0.0238,0.0239,0.0243,0.0245,0.0246,0.0247,0.0247,0.0257,0.0259,0.026,0.0262,0.0262,0.0265,0.0266,0.0268,0.0276,0.0299,0.0306,0.0306,0.0306,0.0309,0.0315,0.0335,0.0341,0.0343,0.0422,0.046,0.0494,0.0496,0.0554,0.06,0.0624,0.0703,0.0929,0.093]"
    data = json.loads(json_data)
    multiplied_data = [math.log(x[2]/(x[3]*math.sqrt(2*math.pi))*math.exp(-1/2*(x[0]+x[2]*math.asinh((e-x[1])/x[3]))**2)/math.sqrt(1+((e-x[1])/x[3])**2)) for e in data]
    # MLE = sum(multiplied_data)
    # return MLE
    # multiplied_data = [x[0]+x[1]+x[2]+x[3]+e for e in data]
    MLE =  -sum(multiplied_data)
    return MLE


#MLE will need to constrain 
def constraint1(x):
    return x[2]
def constraint2(x):
    return x[3]
# def constraint1(x):
#     return 1
# def constraint2(x):
#     return 1

x0 = [0.1,0,1.05,0.01]
# print(objective(x0))

b = (0, 10)
bnds = (b,b,b,b)
con1 = {'type': 'ineq', 'fun': constraint1}
con2 = {'type': 'ineq', 'fun': constraint2}
cons = [con1,con2]

# sol = minimize(objective,x0,method='SLSQP',bounds=bnds,constraints=cons)
sol = minimize(objective,x0,method='Nelder-Mead',bounds=bnds,constraints=cons)
# print(sol)
print(sol)